// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UserOperations extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserOperations entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserOperations must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserOperations", id.toString(), this);
    }
  }

  static load(id: string): UserOperations | null {
    return changetype<UserOperations | null>(store.get("UserOperations", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userOpHash(): Bytes | null {
    let value = this.get("userOpHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userOpHash(value: Bytes | null) {
    if (!value) {
      this.unset("userOpHash");
    } else {
      this.set("userOpHash", Value.fromBytes(<Bytes>value));
    }
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get paymaster(): Bytes | null {
    let value = this.get("paymaster");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set paymaster(value: Bytes | null) {
    if (!value) {
      this.unset("paymaster");
    } else {
      this.set("paymaster", Value.fromBytes(<Bytes>value));
    }
  }

  get nonce(): BigInt | null {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt | null) {
    if (!value) {
      this.unset("nonce");
    } else {
      this.set("nonce", Value.fromBigInt(<BigInt>value));
    }
  }

  get success(): BigInt | null {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set success(value: BigInt | null) {
    if (!value) {
      this.unset("success");
    } else {
      this.set("success", Value.fromBigInt(<BigInt>value));
    }
  }

  get actualGasCost(): BigInt | null {
    let value = this.get("actualGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actualGasCost(value: BigInt | null) {
    if (!value) {
      this.unset("actualGasCost");
    } else {
      this.set("actualGasCost", Value.fromBigInt(<BigInt>value));
    }
  }

  get actualGasUsed(): BigInt | null {
    let value = this.get("actualGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actualGasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("actualGasUsed");
    } else {
      this.set("actualGasUsed", Value.fromBigInt(<BigInt>value));
    }
  }
}
